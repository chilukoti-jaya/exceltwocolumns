import pandas as pd

def calculate_match_percentage(str1, str2):
    if pd.isna(str1) or pd.isna(str2):
        return 0
    str1, str2 = str1.lower(), str2.lower()
    if not (str1 and str2):
        return 0
    matches = sum(c1 == c2 for c1, c2 in zip(str1, min(str2, str1, key=len)))
    return matches / max(len(str1), len(str2))

def analyze_logins(df):
    results = []
    
    for emp_id, emp_group in df.groupby('empid'):
        dev_logins = set(emp_group['devLogin'].dropna())
        employee_uat_logins = set(df[df['empid'] == emp_id]['uatLogin'].dropna())
        
        for dev_login in dev_logins:
            match_percentages = [(uat_login, calculate_match_percentage(dev_login, uat_login)) 
                               for uat_login in employee_uat_logins]
            
            if not match_percentages:
                match_status = "No Match"
                best_match = None
                match_percent = 0
            else:
                best_match, max_match = max(match_percentages, key=lambda x: x[1])
                match_status = ("Exact Match" if max_match == 1 else 
                              "Partial Match" if max_match > 0.5 else 
                              "No Match")
                match_percent = max_match
            
            results.append({
                'empid': emp_id,
                'devLogin': dev_login,
                'best_matching_uatLogin': best_match,
                'match_percentage': round(match_percent * 100, 2),
                'match_status': match_status
            })
    
    return pd.DataFrame(results)

# Test example
data = pd.DataFrame({
    'empid': [1, 1, 1, 2, 2],
    'devLogin': ['john.doe', 'john.d', None, 'jane.smith', 'jsmith'],
    'uatLogin': ['john.doe.test', 'john.doe.uat', 'john.d.uat', 'jane.s.uat', 'jane.smith.uat']
})

result_df = analyze_logins(data)
print(result_df)
